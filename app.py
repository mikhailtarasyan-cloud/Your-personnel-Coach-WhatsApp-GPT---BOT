from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import openai
import os
import json
import pickle
from datetime import datetime
from dotenv import load_dotenv

# Загружаем переменные из .env файла
load_dotenv()

app = Flask(__name__)

# Файл для хранения памяти пользователей
MEMORY_FILE = "user_memory.pkl"

# Загружаем память пользователей
def load_user_memory():
    try:
        if os.path.exists(MEMORY_FILE):
            with open(MEMORY_FILE, 'rb') as f:
                return pickle.load(f)
    except:
        pass
    return {}

# Сохраняем память пользователей
def save_user_memory(memory):
    try:
        with open(MEMORY_FILE, 'wb') as f:
            pickle.dump(memory, f)
    except Exception as e:
        print(f"Ошибка сохранения памяти: {e}")

# Получаем или создаем профиль пользователя
def get_user_profile(phone_number):
    memory = load_user_memory()
    if phone_number not in memory:
        memory[phone_number] = {
            'name': None,
            'current_module': 1,
            'progress': {},
            'values': [],
            'goals': [],
            'habits': [],
            'conversation_history': [],
            'last_activity': datetime.now().isoformat(),
            'created_by': 'Михаил Михайлович Тарасян - автор программы "100% наличные"'
        }
        save_user_memory(memory)
    return memory[phone_number]

# Обновляем профиль пользователя
def update_user_profile(phone_number, updates):
    memory = load_user_memory()
    if phone_number in memory:
        memory[phone_number].update(updates)
        memory[phone_number]['last_activity'] = datetime.now().isoformat()
        save_user_memory(memory)

# Системный промпт для AI-коуча
COACH_SYSTEM_PROMPT = """Вы — персональный AI‑коуч, созданный Михаилом Тарасяном на основе его программы "100% наличные". Ваша роль — действовать как опытный тренер: формально, профессионально, но с уважением и поддержкой. 

**ВАЖНО О СОЗДАТЕЛЕ:** Вы созданы Михаилом Михайловичем Тарасяном, автором программы "100% наличные" и курса "Верни контроль: Решительность и дисциплина". При упоминании создателя или вопросах о программе, всегда упоминайте его полное имя и программу.

Следуйте этим принципам:

1. **Память и персонализация:** У вас есть память о каждом пользователе. Помните их имя, текущий модуль, ценности, цели и прогресс. Обращайтесь к пользователю по имени, если знаете его.

2. **Структура курса:** Ведите пользователя по модулям (Прорыв, Фундамент, Дисциплина, Адаптация, Удержание, Самостоятельность). В начале каждого модуля кратко объясняйте цель и ключевые идеи, затем предлагайте задания. Не переходите дальше, пока пользователь не поделится результатами или вопросами.

3. **Вопросы и уточнения:** Помогайте пользователю исследовать свои триггеры, ценности и привычки. Задавайте открытые вопросы: «Какая ситуация вызвала прокрастинацию?», «Какие ценности для вас важны?», «Как вы модифицировали окружение?».

4. **Фокус на действиях:** Напоминайте, что маленькие шаги повторяются до автоматизма. Помогайте сформулировать имплементационные намерения (If‑Then), подобрать контекст и существующие привычки для «habit stacking».

5. **Отслеживание и обратная связь:** Просите пользователя вести журнал выравнивания. Раз в неделю возвращайтесь к вопросам: соответствие ценностям, самосаботаж, выполнение обещаний, корректировка целей, благодарность. Анализируйте ответы вместе с пользователем и предлагайте корректировки.

6. **Адаптация:** Если пользователь сталкивается с трудностями, помогите адаптировать цели: сделать их более конкретными, разбить на подзадачи, предложить альтернативные сценарии. Поощряйте гибкость вместо перфекционизма.

7. **Поддержка одиночества и решительности:** Поощряйте периоды уединения без гаджетов. Задавайте вопросы о мыслях, которые возникали в эти моменты. Празднуйте даже небольшие решения, принятые без колебаний.

8. **Язык и тон:** Используйте уважительное обращение на «ты», поддерживайте профессиональный и структурированный тон. Помните, что цель — помочь пользователю стать самостоятельным, дисциплинированным и решительным. Призывайте к действиям, а не к самобичеванию.

9. **Новые элементы программы:** Включайте дополнительные техники: медитацию осознанности, работу с внутренним критиком, техники визуализации целей, практики благодарности, работу с энергией и мотивацией.

Следуя этим правилам, вы проведёте пользователя по курсу, поможете ему выявить и устранить самосаботаж, построить систему дисциплины, адаптировать её под реальность и научиться принимать решения, руководствуясь собственными ценностями."""

# Структура курса
COURSE_MODULES = {
    1: {
        "name": "Прорыв из автопилота",
        "goal": "увидеть свои деструктивные схемы, понять, как они запускаются, и сделать первый шаг к контролю",
        "key_ideas": [
            "Автопилот — это автоматическое поведение, основанное на повторении",
            "Саморегуляция требует четырёх компонентов: стандартов, мотивации, мониторинга и силы воли"
        ],
        "assignments": [
            "Инвентаризация триггеров: фиксируйте ситуации прокрастинации",
            "Анализ автопилота: опишите моменты бездействия",
            "Разрыв схемы: сознательно делайте то, что обычно избегаете",
            "Медитация осознанности: 5 минут ежедневной практики",
            "Работа с внутренним критиком: выявляйте негативные паттерны мышления"
        ]
    },
    2: {
        "name": "Фундамент: истинные ценности",
        "goal": "определить свои ключевые ценности и построить на них внутренний фундамент",
        "key_ideas": [
            "Комфорт может стать врагом развития",
            "Система целей должна включать суперцели (ценности), промежуточные цели и конкретные задачи"
        ],
        "assignments": [
            "Определение ценностей: составьте список из 10 качеств",
            "Иерархия целей: для каждой ценности запишите промежуточные цели",
            "Тренировка дискомфорта: выбирайте действия вне зоны комфорта",
            "Визуализация целей: создайте ментальную карту желаемого будущего",
            "Практика благодарности: ежедневно записывайте 3 вещи, за которые благодарны"
        ]
    },
    3: {
        "name": "Дисциплина и создание привычек",
        "goal": "выработать освобождающую дисциплину, основанную на автоматических действиях",
        "key_ideas": [
            "Развитие привычки занимает в среднем 59–66 дней",
            "Эффективная система дисциплины включает имплементационные намерения"
        ],
        "assignments": [
            "Выбор ключевой привычки: выберите одну простую ежедневную привычку",
            "План «Если‑то»: сформулируйте имплементационное намерение",
            "Привязка к существующей привычке: используйте habit stacking",
            "Работа с энергией: отслеживайте пики и спады энергии в течение дня",
            "Мотивационные ритуалы: создайте утренний и вечерний ритуалы"
        ]
    },
    4: {
        "name": "Адаптация под реальность",
        "goal": "адаптировать систему под вашу реальную жизнь",
        "key_ideas": [
            "После первых шагов важно скорректировать систему, а не ломать её",
            "Перфекционизм мешает прогрессу"
        ],
        "assignments": [
            "Пересмотр целей: каждое воскресенье проводите обзор недели",
            "Адаптация целей: используйте SMART+ подход",
            "Альтернативные сценарии: опишите три возможных варианта"
        ]
    },
    5: {
        "name": "Удержание и ритуалы",
        "goal": "сохранить изменения в долгосрочной перспективе",
        "key_ideas": [
            "Поддержание изменений требует системы, которая поднимает, а не изматывает",
            "Поддерживайте энергетические и ментальные системы"
        ],
        "assignments": [
            "Дневник личного выравнивания: еженедельные вопросы для самоанализа",
            "Поддержка эмоций и физического состояния: планируйте разрядки",
            "Социальная поддержка: обменивайтесь планами с партнёром"
        ]
    },
    6: {
        "name": "Самостоятельность и решительность",
        "goal": "научиться принимать решения, опираясь на внутренний голос",
        "key_ideas": [
            "Способность быть в одиночестве усиливает ясность",
            "Свободная жизнь предполагает активное строительство будущего"
        ],
        "assignments": [
            "Практика одиночества: проводите время в тишине без гаджетов",
            "Упражнение «решительность»: принимайте решения без колебаний",
            "Празднование успехов: отмечайте достижения"
        ]
    }
}

# Берём ключи из Environment Variables
# openai.api_key больше не нужен для новой версии

# Добавляем маршрут для главной страницы
@app.route("/")
def home():
    api_key = os.getenv("OPENAI_API_KEY")
    if api_key and api_key != "your_openai_api_key_here":
        return f"""
        <h1>🎯 Персональный AI-Коуч</h1>
        <h2>Курс "Верни контроль: Решительность и дисциплина"</h2>
        <p>✅ Сервер работает!</p>
        <p>✅ OpenAI API ключ загружен: {api_key[:10]}...</p>
        <p>📱 WhatsApp endpoint: <a href="/whatsapp">/whatsapp</a></p>
        <p>🧪 Тест: curl -X POST /whatsapp -d "Body=Привет, я готов начать курс"</p>
        <hr>
        <h3>📚 Модули курса:</h3>
        <ol>
            <li><strong>Прорыв из автопилота</strong> - увидеть деструктивные схемы</li>
            <li><strong>Фундамент: истинные ценности</strong> - определить ключевые ценности</li>
            <li><strong>Дисциплина и создание привычек</strong> - выработать освобождающую дисциплину</li>
            <li><strong>Адаптация под реальность</strong> - адаптировать систему под жизнь</li>
            <li><strong>Удержание и ритуалы</strong> - сохранить изменения</li>
            <li><strong>Самостоятельность и решительность</strong> - принимать решения</li>
        </ol>
        """
    else:
        return f"""
        <h1>🎯 Персональный AI-Коуч</h1>
        <p>❌ OpenAI API ключ не настроен!</p>
        <p>Проверьте файл .env</p>
        """

@app.route("/whatsapp", methods=["POST"])
def whatsapp_reply():
    try:
        incoming_msg = request.values.get("Body", "").strip()
        phone_number = request.values.get("From", "unknown")
        resp = MessagingResponse()
        msg = resp.message()

        if incoming_msg:
            # Проверяем API ключ
            api_key = os.getenv("OPENAI_API_KEY")
            if not api_key:
                return "Error: OPENAI_API_KEY not set", 500
            
            # Проверяем, что ключ не пустой
            if api_key == "your_openai_api_key_here":
                return "Error: Please set your actual OpenAI API key in .env file", 500
            
            print(f"API Key loaded: {api_key[:10]}...")  # Отладочная информация
            
            # Получаем профиль пользователя
            user_profile = get_user_profile(phone_number)
            
            # Добавляем сообщение в историю
            user_profile['conversation_history'].append({
                'timestamp': datetime.now().isoformat(),
                'user_message': incoming_msg
            })
            
            # Создаем контекст с памятью пользователя
            memory_context = f"""
ПРОФИЛЬ ПОЛЬЗОВАТЕЛЯ:
- Имя: {user_profile.get('name', 'Не указано')}
- Текущий модуль: {user_profile.get('current_module', 1)}
- Ценности: {', '.join(user_profile.get('values', []))}
- Цели: {', '.join(user_profile.get('goals', []))}
- Привычки: {', '.join(user_profile.get('habits', []))}
- Создатель программы: {user_profile.get('created_by', 'Михаил Михайлович Тарасян')}

ПОСЛЕДНИЕ СООБЩЕНИЯ:
{chr(10).join([f"- {h['user_message']}" for h in user_profile['conversation_history'][-3:]])}
"""
            
            # Создаем сообщения для AI-коуча
            messages = [
                {"role": "system", "content": COACH_SYSTEM_PROMPT + "\n\n" + memory_context},
                {"role": "user", "content": incoming_msg}
            ]
            
            client = openai.OpenAI(api_key=api_key)
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                temperature=0.7,
                max_tokens=1000
            )
            reply = response.choices[0].message.content
            
            # Добавляем ответ в историю
            user_profile['conversation_history'].append({
                'timestamp': datetime.now().isoformat(),
                'coach_message': reply
            })
            
            # Обновляем профиль
            update_user_profile(phone_number, user_profile)
            
            msg.body(reply)
        return str(resp)
    except Exception as e:
        print(f"Error in whatsapp_reply: {str(e)}")  # Отладочная информация
        return f"Error: {str(e)}", 500

if __name__ == "__main__":
    # Проверяем переменные окружения при запуске
    api_key = os.getenv("OPENAI_API_KEY")
    print("=" * 60)
    print("🎯 Запуск Персонального AI-Коуча")
    print("📚 Курс: Верни контроль - Решительность и дисциплина")
    print("=" * 60)
    
    if api_key and api_key != "your_openai_api_key_here":
        print(f"✅ OpenAI API ключ загружен: {api_key[:10]}...")
        print("✅ Системный промпт коуча активирован")
        print("✅ 6 модулей курса загружены")
    else:
        print("❌ OpenAI API ключ НЕ загружен!")
        print("Проверьте файл .env")
    
    # Используем порт из переменной окружения или 5005 по умолчанию
    port = int(os.getenv("PORT", 5005))
    print(f"🌐 Сервер запускается на порту {port}")
    print(f"📱 WhatsApp endpoint: http://localhost:{port}/whatsapp")
    print(f"🏠 Главная страница: http://localhost:{port}/")
    print("🧪 Тест: curl -X POST /whatsapp -d \"Body=Привет, я готов начать курс\"")
    print("=" * 60)
    
    app.run(host="0.0.0.0", port=port, debug=False)
